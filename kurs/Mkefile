# Название конечных исполняемых файлов
CLIENT_TARGET = client_app
TESTS_TARGET = tests_runner

# Компилятор и основные флаги
CXX = g++
CXXFLAGS = -Wall -Wextra -std=c++17 -g

# Каталоги и файлы
SRC_DIR = src
INCLUDE_DIR = include
TESTS_DIR = tests
OBJ_DIR = obj
UNITPP_FILES = unit++.cpp

# Зависимости (исходные и заголовочные файлы)
CLIENT_SRC = $(SRC_DIR)/Connection.cpp $(SRC_DIR)/Authenticator.cpp $(SRC_DIR)/FileHandler.cpp \
             $(SRC_DIR)/DataHandler.cpp $(SRC_DIR)/Client.cpp
CLIENT_OBJ = $(CLIENT_SRC:$(SRC_DIR)/%.cpp=$(OBJ_DIR)/%.o)

TESTS_SRC = $(TESTS_DIR)/main_tests.cpp $(TESTS_DIR)/ConnectionTests.cpp $(TESTS_DIR)/AuthenticatorTests.cpp \
            $(TESTS_DIR)/FileHandlerTests.cpp $(TESTS_DIR)/DataHandlerTests.cpp
TESTS_OBJ = $(TESTS_SRC:$(TESTS_DIR)/%.cpp=$(OBJ_DIR)/%.o)

# Правило сборки по умолчанию
all: $(CLIENT_TARGET)

# Сборка клиентского приложения
$(CLIENT_TARGET): $(CLIENT_OBJ)
	@echo "Собирается $(CLIENT_TARGET)..."
	$(CXX) $(CXXFLAGS) -o $@ $^

# Сборка тестов
tests: $(TESTS_OBJ) $(OBJ_DIR)/$(UNITPP_FILES:.cpp=.o) $(CLIENT_OBJ)
	@echo "Собираются тесты $(TESTS_TARGET)..."
	$(CXX) $(CXXFLAGS) -o $(TESTS_TARGET) $(TESTS_OBJ) $(OBJ_DIR)/$(UNITPP_FILES:.cpp=.o)

# Общее правило компиляции объектных файлов
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	@mkdir -p $(OBJ_DIR)
	$(CXX) $(CXXFLAGS) -I$(INCLUDE_DIR) -c $< -o $@

$(OBJ_DIR)/%.o: $(TESTS_DIR)/%.cpp
	@mkdir -p $(OBJ_DIR)
	$(CXX) $(CXXFLAGS) -I$(INCLUDE_DIR) -c $< -o $@

# Компиляция unit++.cpp (библиотека Unit++ для тестов)
$(OBJ_DIR)/$(UNITPP_FILES:.cpp=.o): $(UNITPP_FILES)
	@mkdir -p $(OBJ_DIR)
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Удаление временных файлов
clean:
	rm -rf $(OBJ_DIR) $(CLIENT_TARGET) $(TESTS_TARGET)

# Полная пересборка
rebuild: clean all

# Запуск тестов
run-tests: tests
	@echo "Запускаются тесты..."
	./$(TESTS_TARGET)

# Правила для отладки и статического анализа
debug: CXXFLAGS += -g
debug: rebuild

# Псевдонимы (файлы, которые не стоит обрабатывать как обычные)
.PHONY: all clean rebuild tests run-tests debug
